{
  "version": 3,
  "sources": ["../bundle-73oYba/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/discord-interactions/src/util.ts", "../../../node_modules/discord-interactions/src/components.ts", "../../../node_modules/discord-interactions/src/webhooks.ts", "../../../node_modules/discord-interactions/src/index.ts", "../bundle-73oYba/middleware-loader.entry.ts", "../bundle-73oYba/middleware-insertion-facade.js", "../../../src/index.js", "../../../node_modules/src/src/IttyRouter.ts", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/AutoRouter.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/cors.ts", "../../../src/commands/poll.js", "../../../src/services/pollManager.js", "../../../src/utils/chrisStyle.js", "../../../src/utils/rankedChoice.js", "../../../src/interactions/handlers.js", "../../../src/services/scheduler.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/home/runner/workspace/.wrangler/tmp/dev-Plcies",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", null, null, null, null, "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/runner/workspace/.wrangler/tmp/bundle-73oYba/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/runner/workspace/.wrangler/tmp/bundle-73oYba/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/runner/workspace/.wrangler/tmp/bundle-73oYba/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/runner/workspace/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/runner/workspace/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { verifyKey } from 'discord-interactions';\nimport { InteractionType, InteractionResponseType } from 'discord-interactions';\nimport { Router } from 'itty-router';\nimport { pollCommand } from './commands/poll.js';\nimport { handleButtonInteraction, handleSelectMenuInteraction, handleModalSubmit } from './interactions/handlers.js';\nimport { checkPollPhases } from './services/scheduler.js';\n\nconst router = Router();\n\n// Health check endpoint - completely synchronous\nrouter.get('/health', () => {\n  return new Response(JSON.stringify({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    service: 'discord-book-poll-bot',\n    version: '2.0-serverless'\n  }), {\n    status: 200,\n    headers: { \n      'Content-Type': 'application/json',\n      'Cache-Control': 'no-cache'\n    }\n  });\n});\n\n// Discord interactions endpoint\nrouter.post('/interactions', async (request, env) => {\n  try {\n    // Add overall timeout protection\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Request timeout')), 10000); // 10 second timeout\n    });\n\n    const handlerPromise = (async () => {\n      const signature = request.headers.get('x-signature-ed25519');\n      const timestamp = request.headers.get('x-signature-timestamp');\n      const body = await request.text();\n\n      // Verify the request signature\n      const isValidRequest = verifyKey(body, signature, timestamp, env.DISCORD_PUBLIC_KEY);\n      if (!isValidRequest) {\n        return new Response('Bad request signature', { status: 401 });\n      }\n\n      const interaction = JSON.parse(body);\n\n      // Handle ping\n      if (interaction.type === InteractionType.PING) {\n        return new Response(JSON.stringify({ type: InteractionResponseType.PONG }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Validate database connection\n      if (!env.POLLS_DB) {\n        console.error('Database not available');\n        return new Response(JSON.stringify({ \n          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n          data: {\n            content: 'Database unavailable. Please try again later.',\n            flags: 64\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n\n      // Handle application commands\n      if (interaction.type === InteractionType.APPLICATION_COMMAND) {\n        if (interaction.data.name === 'poll') {\n          return await pollCommand.execute(interaction, env);\n        }\n      }\n\n      // Handle message components (buttons, select menus)\n      if (interaction.type === InteractionType.MESSAGE_COMPONENT) {\n        if (interaction.data.component_type === 2) { // Button\n          return await handleButtonInteraction(interaction, env);\n        } else if (interaction.data.component_type === 3) { // Select Menu\n          return await handleSelectMenuInteraction(interaction, env);\n        }\n      }\n\n      // Handle modal submissions\n      if (interaction.type === InteractionType.MODAL_SUBMIT) {\n        return await handleModalSubmit(interaction, env);\n      }\n\n      return new Response(JSON.stringify({ error: 'Unknown interaction type' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    })();\n\n    return await Promise.race([handlerPromise, timeoutPromise]);\n\n  } catch (error) {\n    console.error('Error handling interaction:', error);\n    \n    if (error.message === 'Request timeout') {\n      return new Response(JSON.stringify({\n        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n        data: {\n          content: 'Request timed out. Please try again.',\n          flags: 64\n        }\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    return new Response(JSON.stringify({ error: 'Internal server error' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n});\n\n// Cron job handler for poll phase transitions\nasync function handleCron(event, env, ctx) {\n  console.log('Cron trigger activated');\n  \n  try {\n    // Add timeout protection for cron jobs\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => reject(new Error('Cron timeout')), 25000); // 25 second timeout for cron\n    });\n\n    const cronPromise = checkPollPhases(env);\n\n    await Promise.race([cronPromise, timeoutPromise]);\n    console.log('Cron job completed successfully');\n  } catch (error) {\n    console.error('Error in cron job:', error);\n    if (error.message === 'Cron timeout') {\n      console.error('Cron job timed out - this may indicate database performance issues');\n    }\n  }\n}\n\n// Main handler\nexport default {\n  async fetch(request, env, ctx) {\n    return router.handle(request, env, ctx);\n  },\n  \n  async scheduled(event, env, ctx) {\n    return handleCron(event, env, ctx);\n  }\n};", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "// Serverless Poll Command for Cloudflare Workers\nimport { InteractionResponseType } from 'discord-interactions';\nimport { PollManager } from '../services/pollManager.js';\n\nexport const pollCommand = {\n    data: {\n        name: 'poll',\n        description: 'Manage book polls',\n        options: [\n            {\n                name: 'create',\n                description: 'Create a new book poll',\n                type: 1, // SUB_COMMAND\n                options: [\n                    {\n                        name: 'title',\n                        description: 'Poll title',\n                        type: 3, // STRING\n                        required: true\n                    },\n                    {\n                        name: 'nomination_hours',\n                        description: 'Hours for nomination phase',\n                        type: 4, // INTEGER\n                        required: true\n                    },\n                    {\n                        name: 'voting_hours',\n                        description: 'Hours for voting phase',\n                        type: 4, // INTEGER\n                        required: true\n                    },\n                    {\n                        name: 'tally_method',\n                        description: 'Voting method',\n                        type: 3, // STRING\n                        required: false,\n                        choices: [\n                            { name: 'Ranked Choice (rank all books)', value: 'ranked-choice' },\n                            { name: 'Chris Style (top 3 picks)', value: 'chris-style' }\n                        ]\n                    }\n                ]\n            },\n            {\n                name: 'status',\n                description: 'Check poll status',\n                type: 1, // SUB_COMMAND\n                options: [\n                    {\n                        name: 'poll_id',\n                        description: 'Poll ID (optional - will auto-detect if not provided)',\n                        type: 3, // STRING\n                        required: false\n                    }\n                ]\n            },\n            {\n                name: 'nominate',\n                description: 'Nominate a book',\n                type: 1, // SUB_COMMAND\n                options: [\n                    {\n                        name: 'title',\n                        description: 'Book title',\n                        type: 3, // STRING\n                        required: true\n                    },\n                    {\n                        name: 'author',\n                        description: 'Book author',\n                        type: 3, // STRING\n                        required: false\n                    },\n                    {\n                        name: 'link',\n                        description: 'Link to book',\n                        type: 3, // STRING\n                        required: false\n                    },\n                    {\n                        name: 'poll_id',\n                        description: 'Poll ID (optional - will auto-detect if not provided)',\n                        type: 3, // STRING\n                        required: false\n                    }\n                ]\n            },\n            {\n                name: 'list',\n                description: 'List all polls',\n                type: 1 // SUB_COMMAND\n            },\n            {\n                name: 'end-nominations',\n                description: 'End nomination phase early',\n                type: 1, // SUB_COMMAND\n                options: [\n                    {\n                        name: 'poll_id',\n                        description: 'Poll ID (optional - will auto-detect if not provided)',\n                        type: 3, // STRING\n                        required: false\n                    }\n                ]\n            },\n            {\n                name: 'end-voting',\n                description: 'End voting phase early',\n                type: 1, // SUB_COMMAND\n                options: [\n                    {\n                        name: 'poll_id',\n                        description: 'Poll ID (optional - will auto-detect if not provided)',\n                        type: 3, // STRING\n                        required: false\n                    }\n                ]\n            }\n        ]\n    },\n\n    async execute(interaction, env) {\n        const subcommand = interaction.data.options?.[0]?.name;\n        const options = interaction.data.options?.[0]?.options || [];\n        \n        try {\n            // Add timeout protection\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Command timeout')), 8000);\n            });\n\n            const commandPromise = (async () => {\n                const pollManager = new PollManager(env);\n                \n                switch (subcommand) {\n                    case 'create':\n                        return await this.handleCreate(interaction, options, pollManager);\n                    case 'status':\n                        return await this.handleStatus(interaction, options, pollManager);\n                    case 'nominate':\n                        return await this.handleNominate(interaction, options, pollManager);\n                    case 'list':\n                        return await this.handleList(interaction, pollManager);\n                    case 'end-nominations':\n                        return await this.handleEndNominations(interaction, options, pollManager);\n                    case 'end-voting':\n                        return await this.handleEndVoting(interaction, options, pollManager);\n                    default:\n                        return new Response(JSON.stringify({\n                            type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                            data: {\n                                content: 'Unknown subcommand',\n                                flags: 64 // Ephemeral\n                            }\n                        }), {\n                            headers: { 'Content-Type': 'application/json' }\n                        });\n                }\n            })();\n\n            return await Promise.race([commandPromise, timeoutPromise]);\n        } catch (error) {\n            console.error('Error executing poll command:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: error.message === 'Command timeout' ? \n                        'Request timed out. Please try again.' : \n                        `Error: ${error.message}`,\n                    flags: 64 // Ephemeral\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleCreate(interaction, options, pollManager) {\n        try {\n            const title = options.find(opt => opt.name === 'title')?.value;\n            const nominationHours = options.find(opt => opt.name === 'nomination_hours')?.value;\n            const votingHours = options.find(opt => opt.name === 'voting_hours')?.value;\n            const tallyMethod = options.find(opt => opt.name === 'tally_method')?.value || 'ranked-choice';\n\n            if (!title || !nominationHours || !votingHours) {\n                throw new Error('Missing required parameters');\n            }\n\n            const now = new Date();\n            const nominationDeadline = new Date(now.getTime() + nominationHours * 60 * 60 * 1000);\n            const votingDeadline = new Date(nominationDeadline.getTime() + votingHours * 60 * 60 * 1000);\n\n            const pollData = {\n                title,\n                guildId: interaction.guild_id,\n                channelId: interaction.channel_id,\n                creatorId: interaction.member?.user?.id || interaction.user?.id,\n                nominationDeadline: nominationDeadline.toISOString(),\n                votingDeadline: votingDeadline.toISOString(),\n                tallyMethod\n            };\n\n            const poll = await pollManager.createPoll(pollData);\n            \n            if (!poll) {\n                throw new Error('Failed to create poll');\n            }\n\n            const embed = {\n                title: '\uD83D\uDCDA New Book Poll Created!',\n                description: `**${poll.title}**`,\n                color: 0x0099FF,\n                fields: [\n                    {\n                        name: '\uD83D\uDCDD Current Phase',\n                        value: 'Nomination',\n                        inline: true\n                    },\n                    {\n                        name: '\uD83D\uDCCA Tally Method',\n                        value: tallyMethod === 'chris-style' ? 'Chris Style' : 'Ranked Choice',\n                        inline: true\n                    },\n                    {\n                        name: '\u23F0 Nomination Deadline',\n                        value: `<t:${Math.floor(nominationDeadline.getTime() / 1000)}:F>`,\n                        inline: false\n                    },\n                    {\n                        name: '\uD83D\uDDF3\uFE0F Voting Deadline',\n                        value: `<t:${Math.floor(votingDeadline.getTime() / 1000)}:F>`,\n                        inline: false\n                    }\n                ],\n                footer: { text: `Poll ID: ${poll.id}` },\n                timestamp: new Date().toISOString()\n            };\n\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    embeds: [embed]\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error creating poll:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error creating poll: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleStatus(interaction, options, pollManager) {\n        try {\n            let pollId = options.find(opt => opt.name === 'poll_id')?.value;\n            \n            if (!pollId) {\n                const activePoll = await pollManager.getSingleActivePoll(interaction.guild_id);\n                if (activePoll) {\n                    pollId = activePoll.id;\n                } else {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'No active polls found. Please specify a poll ID.',\n                            flags: 64\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n            }\n\n            const poll = await pollManager.getPoll(pollId);\n            if (!poll) {\n                return new Response(JSON.stringify({\n                    type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                    data: {\n                        content: 'Poll not found.',\n                        flags: 64\n                    }\n                }), {\n                    headers: { 'Content-Type': 'application/json' }\n                });\n            }\n\n            const embed = this.createStatusEmbed(poll);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    embeds: [embed]\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error getting poll status:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error getting status: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleNominate(interaction, options, pollManager) {\n        try {\n            const title = options.find(opt => opt.name === 'title')?.value;\n            const author = options.find(opt => opt.name === 'author')?.value;\n            const link = options.find(opt => opt.name === 'link')?.value;\n            let pollId = options.find(opt => opt.name === 'poll_id')?.value;\n\n            if (!pollId) {\n                const activePoll = await pollManager.getSingleActivePoll(interaction.guild_id);\n                if (activePoll && activePoll.phase === 'nomination') {\n                    pollId = activePoll.id;\n                } else {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'No active nomination phase found. Please specify a poll ID.',\n                            flags: 64\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n            }\n\n            const nomination = {\n                title,\n                author,\n                link,\n                userId: interaction.member?.user?.id || interaction.user?.id,\n                username: interaction.member?.user?.username || interaction.user?.username\n            };\n\n            await pollManager.nominateBook(pollId, nomination);\n\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `\u2705 Successfully nominated \"${title}\" ${author ? `by ${author}` : ''}!`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error nominating book:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleList(interaction, pollManager) {\n        try {\n            const polls = await pollManager.getAllPolls(interaction.guild_id);\n            \n            if (polls.length === 0) {\n                return new Response(JSON.stringify({\n                    type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                    data: {\n                        content: '\uD83D\uDCDA No polls found in this server.',\n                        flags: 64\n                    }\n                }), {\n                    headers: { 'Content-Type': 'application/json' }\n                });\n            }\n\n            const pollList = polls.map(poll => \n                `\\`${poll.id}\\` - **${poll.title}** (${poll.phase}) - <t:${Math.floor(new Date(poll.createdAt).getTime() / 1000)}:R>`\n            ).join('\\n');\n\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    embeds: [{\n                        title: '\uD83D\uDCDA Server Polls',\n                        description: pollList,\n                        color: 0x0099FF,\n                        timestamp: new Date().toISOString()\n                    }],\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error listing polls:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error listing polls: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleEndNominations(interaction, options, pollManager) {\n        try {\n            let pollId = options.find(opt => opt.name === 'poll_id')?.value;\n            \n            if (!pollId) {\n                const activePoll = await pollManager.getSingleActivePoll(interaction.guild_id);\n                if (activePoll && activePoll.phase === 'nomination') {\n                    pollId = activePoll.id;\n                } else {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'No active nomination phase found.',\n                            flags: 64\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n            }\n\n            await pollManager.updatePollPhase(pollId, 'voting');\n\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: '\u2705 Nomination phase ended. Voting phase has begun!',\n                    components: [{\n                        type: 1, // Action Row\n                        components: [{\n                            type: 2, // Button\n                            style: 1, // Primary\n                            label: '\uD83D\uDDF3\uFE0F Vote Now',\n                            custom_id: `vote_${pollId}`\n                        }]\n                    }]\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error ending nominations:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    async handleEndVoting(interaction, options, pollManager) {\n        try {\n            let pollId = options.find(opt => opt.name === 'poll_id')?.value;\n            \n            if (!pollId) {\n                const activePoll = await pollManager.getSingleActivePoll(interaction.guild_id);\n                if (activePoll && activePoll.phase === 'voting') {\n                    pollId = activePoll.id;\n                } else {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'No active voting phase found.',\n                            flags: 64\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n            }\n\n            const completedPoll = await pollManager.updatePollPhase(pollId, 'completed');\n\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: '\u2705 Voting phase ended. Poll completed!',\n                    embeds: [this.createStatusEmbed(completedPoll)]\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        } catch (error) {\n            console.error('Error ending voting:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: `Error: ${error.message}`,\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    },\n\n    createStatusEmbed(poll) {\n        const embed = {\n            title: `\uD83D\uDCDA ${poll.title}`,\n            color: poll.phase === 'completed' ? 0x00ff00 : \n                   poll.phase === 'voting' ? 0xffaa00 : 0x0099ff,\n            fields: [\n                {\n                    name: '\uD83D\uDCDD Phase',\n                    value: poll.phase.charAt(0).toUpperCase() + poll.phase.slice(1),\n                    inline: true\n                },\n                {\n                    name: '\uD83D\uDCCA Tally Method',\n                    value: poll.tallyMethod === 'chris-style' ? 'Chris Style' : 'Ranked Choice',\n                    inline: true\n                },\n                {\n                    name: '\uD83D\uDCDA Nominations',\n                    value: poll.nominations.length.toString(),\n                    inline: true\n                }\n            ],\n            footer: { text: `Poll ID: ${poll.id}` },\n            timestamp: new Date().toISOString()\n        };\n\n        // Add nominations list\n        if (poll.nominations.length > 0) {\n            const nominationsList = poll.nominations.map((nom, idx) => \n                `${idx + 1}. **${nom.title}** ${nom.author ? `by ${nom.author}` : ''}`\n            ).join('\\n');\n            \n            embed.fields.push({\n                name: '\uD83D\uDCD6 Nominated Books',\n                value: nominationsList,\n                inline: false\n            });\n        }\n\n        // Add voting information\n        if (poll.phase === 'voting') {\n            embed.fields.push({\n                name: '\uD83D\uDDF3\uFE0F Votes Cast',\n                value: poll.votes.length.toString(),\n                inline: true\n            });\n        }\n\n        // Add results for completed polls\n        if (poll.phase === 'completed' && poll.results) {\n            const results = poll.results;\n            if (results.winner) {\n                embed.fields.push({\n                    name: '\uD83C\uDFC6 Winner',\n                    value: `**${results.winner.title}** ${results.winner.author ? `by ${results.winner.author}` : ''}`,\n                    inline: false\n                });\n            }\n        }\n\n        return embed;\n    }\n};", "// Serverless Poll Manager for Cloudflare Workers with D1 Database\nimport { calculateChrisStyleWinner } from '../utils/chrisStyle.js';\nimport { calculateRankedChoiceWinner } from '../utils/rankedChoice.js';\n\nexport class PollManager {\n    constructor(env) {\n        this.env = env;\n        this.db = env.POLLS_DB;\n    }\n\n    generatePollId() {\n        return Math.random().toString(36).substr(2, 9).toUpperCase();\n    }\n\n    async createPoll(pollData) {\n        const pollId = this.generatePollId();\n        const now = new Date().toISOString();\n        \n        try {\n            await this.db.prepare(`\n                INSERT INTO polls (\n                    id, title, guild_id, channel_id, creator_id, \n                    phase, tally_method, nomination_deadline, voting_deadline, \n                    created_at, updated_at\n                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n            `).bind(\n                pollId,\n                pollData.title,\n                pollData.guildId,\n                pollData.channelId,\n                pollData.creatorId,\n                'nomination',\n                pollData.tallyMethod || 'ranked-choice',\n                pollData.nominationDeadline,\n                pollData.votingDeadline,\n                now,\n                now\n            ).run();\n\n            return await this.getPoll(pollId);\n        } catch (error) {\n            console.error('Error creating poll:', error);\n            throw error;\n        }\n    }\n\n    async getPoll(pollId) {\n        try {\n            // Get poll data\n            const pollResult = await this.db.prepare(`\n                SELECT * FROM polls WHERE id = ?\n            `).bind(pollId).first();\n            \n            if (!pollResult) {\n                return null;\n            }\n            \n            // Get nominations with timeout protection\n            const nominationsQuery = this.db.prepare(`\n                SELECT * FROM nominations WHERE poll_id = ? ORDER BY created_at ASC LIMIT 50\n            `).bind(pollId);\n            \n            // Get votes with timeout protection\n            const votesQuery = this.db.prepare(`\n                SELECT * FROM votes WHERE poll_id = ? ORDER BY created_at ASC LIMIT 100\n            `).bind(pollId);\n            \n            // Execute queries with timeout\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Database timeout')), 5000);\n            });\n            \n            const queryPromise = Promise.all([\n                nominationsQuery.all(),\n                votesQuery.all()\n            ]);\n            \n            const [nominationsResult, votesResult] = await Promise.race([\n                queryPromise,\n                timeoutPromise\n            ]);\n            \n            // Build poll object safely\n            const poll = {\n                id: pollResult.id,\n                title: pollResult.title,\n                guildId: pollResult.guild_id,\n                channelId: pollResult.channel_id,\n                creatorId: pollResult.creator_id,\n                phase: pollResult.phase,\n                tallyMethod: pollResult.tally_method,\n                nominationDeadline: pollResult.nomination_deadline,\n                votingDeadline: pollResult.voting_deadline,\n                createdAt: pollResult.created_at,\n                updatedAt: pollResult.updated_at,\n                nominations: [],\n                votes: [],\n                results: null\n            };\n            \n            // Process nominations safely\n            if (nominationsResult?.results) {\n                poll.nominations = nominationsResult.results.map(n => ({\n                    title: n.title,\n                    author: n.author,\n                    link: n.link,\n                    userId: n.user_id,\n                    username: n.username,\n                    timestamp: n.created_at\n                }));\n            }\n            \n            // Process votes safely\n            if (votesResult?.results) {\n                poll.votes = votesResult.results.map(v => {\n                    try {\n                        return {\n                            userId: v.user_id,\n                            rankings: JSON.parse(v.rankings || '[]'),\n                            timestamp: v.created_at\n                        };\n                    } catch (parseError) {\n                        console.error('Error parsing vote rankings:', parseError);\n                        return {\n                            userId: v.user_id,\n                            rankings: [],\n                            timestamp: v.created_at\n                        };\n                    }\n                });\n            }\n            \n            // Calculate results if completed and manageable size\n            if (poll.phase === 'completed' && poll.votes.length < 100) {\n                try {\n                    poll.results = this.calculateResults(poll);\n                } catch (resultError) {\n                    console.error('Error calculating results:', resultError);\n                    poll.results = null;\n                }\n            }\n            \n            return poll;\n        } catch (error) {\n            console.error('Error getting poll:', error);\n            if (error.message === 'Database timeout') {\n                throw new Error('Request timed out. Please try again.');\n            }\n            throw error;\n        }\n    }\n\n    async getAllPolls(guildId) {\n        try {\n            const pollsResult = await this.db.prepare(`\n                SELECT * FROM polls WHERE guild_id = ? ORDER BY created_at DESC LIMIT 20\n            `).bind(guildId).all();\n            \n            if (!pollsResult?.results) return [];\n            \n            // Return simplified poll list without full data to avoid timeouts\n            return pollsResult.results.map(pollRow => ({\n                id: pollRow.id,\n                title: pollRow.title,\n                guildId: pollRow.guild_id,\n                channelId: pollRow.channel_id,\n                creatorId: pollRow.creator_id,\n                phase: pollRow.phase,\n                tallyMethod: pollRow.tally_method,\n                nominationDeadline: pollRow.nomination_deadline,\n                votingDeadline: pollRow.voting_deadline,\n                createdAt: pollRow.created_at,\n                updatedAt: pollRow.updated_at\n            }));\n        } catch (error) {\n            console.error('Error getting polls:', error);\n            return [];\n        }\n    }\n\n    async updatePoll(pollId, updates) {\n        const now = new Date().toISOString();\n        const setParts = [];\n        const bindings = [];\n        \n        // Build dynamic update query\n        for (const [key, value] of Object.entries(updates)) {\n            const dbColumn = this.convertFieldToColumn(key);\n            setParts.push(`${dbColumn} = ?`);\n            \n            if (key === 'results') {\n                bindings.push(JSON.stringify(value));\n            } else {\n                bindings.push(value);\n            }\n        }\n        \n        setParts.push('updated_at = ?');\n        bindings.push(now);\n        bindings.push(pollId);\n        \n        await this.db.prepare(`\n            UPDATE polls SET ${setParts.join(', ')} WHERE id = ?\n        `).bind(...bindings).run();\n    }\n    \n    convertFieldToColumn(field) {\n        const fieldMap = {\n            'phase': 'phase',\n            'results': 'results_data',\n            'tallyMethod': 'tally_method'\n        };\n        return fieldMap[field] || field;\n    }\n\n    async nominateBook(pollId, nomination) {\n        try {\n            // Check if user already nominated with a direct query\n            const existingNomination = await this.db.prepare(`\n                SELECT id FROM nominations WHERE poll_id = ? AND user_id = ?\n            `).bind(pollId, nomination.userId).first();\n            \n            if (existingNomination) {\n                throw new Error('You have already nominated a book for this poll');\n            }\n\n            // Insert nomination\n            await this.db.prepare(`\n                INSERT INTO nominations (poll_id, title, author, link, user_id, username)\n                VALUES (?, ?, ?, ?, ?, ?)\n            `).bind(\n                pollId,\n                nomination.title,\n                nomination.author || null,\n                nomination.link || null,\n                nomination.userId,\n                nomination.username\n            ).run();\n\n            return await this.getPoll(pollId);\n        } catch (error) {\n            console.error('Error nominating book:', error);\n            throw error;\n        }\n    }\n\n    async removeUserNomination(pollId, userId) {\n        try {\n            await this.db.prepare(`\n                DELETE FROM nominations WHERE poll_id = ? AND user_id = ?\n            `).bind(pollId, userId).run();\n\n            return await this.getPoll(pollId);\n        } catch (error) {\n            console.error('Error removing nomination:', error);\n            throw error;\n        }\n    }\n\n    async submitVote(pollId, userId, rankings) {\n        try {\n            // Check if user already voted with direct query\n            const existingVote = await this.db.prepare(`\n                SELECT id FROM votes WHERE poll_id = ? AND user_id = ?\n            `).bind(pollId, userId).first();\n            \n            if (existingVote) {\n                throw new Error('You have already voted in this poll');\n            }\n\n            // Insert vote\n            await this.db.prepare(`\n                INSERT INTO votes (poll_id, user_id, rankings)\n                VALUES (?, ?, ?)\n            `).bind(pollId, userId, JSON.stringify(rankings)).run();\n\n            return await this.getPoll(pollId);\n        } catch (error) {\n            console.error('Error submitting vote:', error);\n            throw error;\n        }\n    }\n\n    async updatePollPhase(pollId, newPhase) {\n        try {\n            if (newPhase === 'completed') {\n                const poll = await this.getPoll(pollId);\n                if (poll && poll.nominations.length > 0) {\n                    const results = this.calculateResults(poll);\n                    await this.updatePoll(pollId, { phase: newPhase, results });\n                } else {\n                    await this.updatePoll(pollId, { phase: newPhase });\n                }\n            } else {\n                await this.updatePoll(pollId, { phase: newPhase });\n            }\n            \n            return await this.getPoll(pollId);\n        } catch (error) {\n            console.error('Error updating poll phase:', error);\n            throw error;\n        }\n    }\n\n    calculateResults(poll) {\n        if (poll.tallyMethod === 'chris-style') {\n            return this.calculateChrisStyleResults(poll);\n        } else {\n            return this.calculateRankedChoiceResults(poll);\n        }\n    }\n\n    calculateChrisStyleResults(poll) {\n        try {\n            return calculateChrisStyleWinner(poll.nominations, poll.votes);\n        } catch (error) {\n            console.error('Error calculating Chris-style results:', error);\n            return { winner: null, standings: [], totalVotes: 0 };\n        }\n    }\n\n    calculateRankedChoiceResults(poll) {\n        try {\n            return calculateRankedChoiceWinner(poll.nominations, poll.votes);\n        } catch (error) {\n            console.error('Error calculating ranked choice results:', error);\n            return { winner: null, rounds: [], totalVotes: 0 };\n        }\n    }\n\n    async checkIfAllVoted(pollId) {\n        // Simplified check - just return the poll\n        return await this.getPoll(pollId);\n    }\n\n    async getActivePolls() {\n        try {\n            const result = await this.db.prepare(`\n                SELECT * FROM polls WHERE phase IN ('nomination', 'voting') ORDER BY created_at DESC LIMIT 10\n            `).all();\n            \n            if (!result?.results) return [];\n            \n            return result.results.map(row => ({\n                id: row.id,\n                title: row.title,\n                guildId: row.guild_id,\n                channelId: row.channel_id,\n                phase: row.phase,\n                nominationDeadline: row.nomination_deadline,\n                votingDeadline: row.voting_deadline\n            }));\n        } catch (error) {\n            console.error('Error getting active polls:', error);\n            return [];\n        }\n    }\n\n    async getSingleActivePoll(guildId) {\n        try {\n            const result = await this.db.prepare(`\n                SELECT * FROM polls WHERE guild_id = ? AND phase IN ('nomination', 'voting') \n                ORDER BY created_at DESC LIMIT 1\n            `).bind(guildId).first();\n            \n            if (!result) return null;\n            \n            return {\n                id: result.id,\n                title: result.title,\n                phase: result.phase\n            };\n        } catch (error) {\n            console.error('Error getting single active poll:', error);\n            return null;\n        }\n    }\n\n    // Voting session management for chris-style voting\n    async getVotingSession(userKey) {\n        try {\n            const result = await this.db.prepare(`\n                SELECT * FROM voting_sessions WHERE user_key = ? AND expires_at > datetime('now')\n            `).bind(userKey).first();\n            \n            if (!result) return null;\n            \n            return {\n                pollId: result.poll_id,\n                userId: result.user_id,\n                selections: JSON.parse(result.selections || '[]')\n            };\n        } catch (error) {\n            console.error('Error getting voting session:', error);\n            return null;\n        }\n    }\n\n    async setVotingSession(userKey, pollId, userId, selections) {\n        try {\n            const expiresAt = new Date(Date.now() + 10 * 60 * 1000).toISOString(); // 10 minutes\n            \n            await this.db.prepare(`\n                INSERT OR REPLACE INTO voting_sessions (user_key, poll_id, user_id, selections, expires_at)\n                VALUES (?, ?, ?, ?, ?)\n            `).bind(userKey, pollId, userId, JSON.stringify(selections), expiresAt).run();\n        } catch (error) {\n            console.error('Error setting voting session:', error);\n        }\n    }\n\n    async deleteVotingSession(userKey) {\n        try {\n            await this.db.prepare(`\n                DELETE FROM voting_sessions WHERE user_key = ?\n            `).bind(userKey).run();\n        } catch (error) {\n            console.error('Error deleting voting session:', error);\n        }\n    }\n}", "/**\n * Implements Chris-style voting where users pick exactly 3 books\n * First place gets 3 points, second gets 2 points, third gets 1 point\n * @param {Array} candidates - Array of nomination objects\n * @param {Array} votes - Array of vote objects with rankings\n * @returns {Object} Results object with winner and final scores\n */\nexport function calculateChrisStyleWinner(candidates, votes) {\n    const scores = {};\n    \n    // Initialize scores for all candidates\n    candidates.forEach((candidate, index) => {\n        scores[index] = {\n            nomination: candidate,\n            points: 0\n        };\n    });\n    \n    // Calculate points from votes\n    votes.forEach(vote => {\n        vote.rankings.forEach((bookIndex, position) => {\n            const candidateIndex = bookIndex - 1;\n            if (scores[candidateIndex]) {\n                // Award points: 3 for first, 2 for second, 1 for third\n                const points = Math.max(0, 3 - position);\n                scores[candidateIndex].points += points;\n            }\n        });\n    });\n    \n    // Sort candidates by points (highest first)\n    const sortedResults = Object.values(scores)\n        .sort((a, b) => b.points - a.points);\n    \n    return {\n        winner: sortedResults[0]?.nomination || null,\n        standings: sortedResults,\n        totalVotes: votes.length\n    };\n}\n\n/**\n * Format chris-style results for display\n * @param {Object} results - Results from calculateChrisStyleWinner\n * @returns {String} Formatted results string\n */\nexport function formatChrisStyleResults(results) {\n    if (!results.winner) {\n        return \"No winner determined.\";\n    }\n    \n    let output = `Chris-Style Winner: ${results.winner.title}\\n\\n`;\n    output += \"Final Standings:\\n\";\n    \n    results.standings.forEach((result, index) => {\n        const position = index === 0 ? \"\uD83E\uDD47\" : index === 1 ? \"\uD83E\uDD48\" : index === 2 ? \"\uD83E\uDD49\" : `${index + 1}.`;\n        output += `${position} ${result.nomination.title} - ${result.points} points\\n`;\n    });\n    \n    return output;\n}", "/**\n * Implements Instant Runoff Voting (IRV) for ranked choice voting\n * @param {Array} candidates - Array of nomination objects\n * @param {Array} votes - Array of vote objects with rankings\n * @returns {Object} Results object with winner and elimination rounds\n */\nexport function calculateRankedChoiceWinner(candidates, votes) {\n    if (candidates.length === 0) {\n        return { winner: null, rounds: [], totalVotes: votes.length };\n    }\n    \n    if (candidates.length === 1) {\n        return { \n            winner: candidates[0], \n            rounds: [{ eliminated: null, votes: { [0]: votes.length } }],\n            totalVotes: votes.length \n        };\n    }\n    \n    let remainingCandidates = [...candidates];\n    let currentVotes = votes.map(vote => ({ ...vote }));\n    const rounds = [];\n    \n    while (remainingCandidates.length > 1) {\n        // Count first choice votes for remaining candidates\n        const voteCounts = {};\n        remainingCandidates.forEach((_, index) => {\n            voteCounts[index] = 0;\n        });\n        \n        currentVotes.forEach(vote => {\n            // Find the highest ranked remaining candidate\n            for (const ranking of vote.rankings) {\n                const candidateIndex = ranking - 1;\n                if (remainingCandidates[candidateIndex]) {\n                    voteCounts[candidateIndex]++;\n                    break;\n                }\n            }\n        });\n        \n        // Check if any candidate has majority\n        const totalVotes = Object.values(voteCounts).reduce((sum, count) => sum + count, 0);\n        const majority = Math.floor(totalVotes / 2) + 1;\n        \n        for (const [index, count] of Object.entries(voteCounts)) {\n            if (count >= majority) {\n                rounds.push({ eliminated: null, votes: voteCounts });\n                return { \n                    winner: remainingCandidates[index], \n                    rounds,\n                    totalVotes: votes.length \n                };\n            }\n        }\n        \n        // Find candidate with least votes to eliminate\n        let minVotes = Infinity;\n        let eliminateIndex = -1;\n        \n        for (const [index, count] of Object.entries(voteCounts)) {\n            if (count < minVotes) {\n                minVotes = count;\n                eliminateIndex = parseInt(index);\n            }\n        }\n        \n        // Record this round\n        rounds.push({ \n            eliminated: remainingCandidates[eliminateIndex], \n            votes: { ...voteCounts } \n        });\n        \n        // Remove eliminated candidate\n        remainingCandidates.splice(eliminateIndex, 1);\n        \n        // Update vote rankings to remove eliminated candidate\n        currentVotes.forEach(vote => {\n            vote.rankings = vote.rankings.filter(ranking => \n                remainingCandidates[ranking - 1] !== undefined\n            );\n        });\n    }\n    \n    return { \n        winner: remainingCandidates[0] || null, \n        rounds,\n        totalVotes: votes.length \n    };\n}\n\n/**\n * Format results for display\n * @param {Object} results - Results from calculateRankedChoiceWinner\n * @returns {String} Formatted results string\n */\nexport function formatResults(results) {\n    if (!results.winner) {\n        return \"No winner determined.\";\n    }\n    \n    let output = `Winner: ${results.winner.title}\\n\\n`;\n    \n    if (results.rounds.length > 1) {\n        output += \"Elimination rounds:\\n\";\n        results.rounds.forEach((round, index) => {\n            if (round.eliminated) {\n                output += `Round ${index + 1}: ${round.eliminated.title} eliminated\\n`;\n            }\n        });\n    }\n    \n    return output;\n}", "// Serverless interaction handlers for Cloudflare Workers\nimport { InteractionResponseType } from 'discord-interactions';\nimport { PollManager } from '../services/pollManager.js';\n\nexport async function handleButtonInteraction(interaction, env) {\n    if (interaction.data.custom_id.startsWith('vote_')) {\n        const pollId = interaction.data.custom_id.replace('vote_', '');\n        \n        try {\n            // Add timeout protection\n            const timeoutPromise = new Promise((_, reject) => {\n                setTimeout(() => reject(new Error('Handler timeout')), 8000);\n            });\n\n            const handlerPromise = (async () => {\n                const pollManager = new PollManager(env);\n                const poll = await pollManager.getPoll(pollId);\n                \n                if (!poll) {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'Poll not found!',\n                            flags: 64 // Ephemeral\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n                \n                if (poll.phase !== 'voting') {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: `This poll is currently in the ${poll.phase} phase. Voting is not available yet.`,\n                            flags: 64 // Ephemeral\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n                \n                // Check if user already voted using efficient query\n                const userId = interaction.member?.user?.id || interaction.user?.id;\n                const existingVote = await pollManager.db.prepare(`\n                    SELECT id FROM votes WHERE poll_id = ? AND user_id = ?\n                `).bind(pollId, userId).first();\n                \n                if (existingVote) {\n                    return new Response(JSON.stringify({\n                        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                        data: {\n                            content: 'You have already voted in this poll!',\n                            flags: 64 // Ephemeral\n                        }\n                    }), {\n                        headers: { 'Content-Type': 'application/json' }\n                    });\n                }\n\n                // Generate voting interface based on tally method\n                if (poll.tallyMethod === 'chris-style') {\n                    return generateChrisStyleVotingInterface(poll, userId);\n                } else {\n                    return generateRankedChoiceVotingInterface(poll);\n                }\n            })();\n\n            return await Promise.race([handlerPromise, timeoutPromise]);\n        } catch (error) {\n            console.error('Error handling vote button:', error);\n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: error.message === 'Handler timeout' ? \n                        'Request timed out. Please try again.' : \n                        'An error occurred. Please try again.',\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        }\n    }\n\n    return new Response(JSON.stringify({\n        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n        data: {\n            content: 'Unknown button interaction',\n            flags: 64\n        }\n    }), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\n\nexport async function handleSelectMenuInteraction(interaction, env) {\n    try {\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Handler timeout')), 8000);\n        });\n\n        const handlerPromise = (async () => {\n            const pollManager = new PollManager(env);\n            const customId = interaction.data.custom_id;\n            \n            if (customId.startsWith('chris_vote_')) {\n                return await handleChrisStyleVoting(interaction, env, pollManager);\n            }\n            \n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: 'Unknown select menu interaction',\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        })();\n\n        return await Promise.race([handlerPromise, timeoutPromise]);\n    } catch (error) {\n        console.error('Error handling select menu:', error);\n        return new Response(JSON.stringify({\n            type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n            data: {\n                content: error.message === 'Handler timeout' ? \n                    'Request timed out. Please try again.' : \n                    'An error occurred. Please try again.',\n                flags: 64\n            }\n        }), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\n\nexport async function handleModalSubmit(interaction, env) {\n    try {\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Handler timeout')), 8000);\n        });\n\n        const handlerPromise = (async () => {\n            const pollManager = new PollManager(env);\n            \n            if (interaction.data.custom_id.startsWith('ranked_vote_')) {\n                return await handleRankedChoiceSubmission(interaction, env, pollManager);\n            }\n            \n            return new Response(JSON.stringify({\n                type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n                data: {\n                    content: 'Unknown modal submission',\n                    flags: 64\n                }\n            }), {\n                headers: { 'Content-Type': 'application/json' }\n            });\n        })();\n\n        return await Promise.race([handlerPromise, timeoutPromise]);\n    } catch (error) {\n        console.error('Error handling modal submit:', error);\n        return new Response(JSON.stringify({\n            type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n            data: {\n                content: error.message === 'Handler timeout' ? \n                    'Request timed out. Please try again.' : \n                    'An error occurred. Please try again.',\n                flags: 64\n            }\n        }), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n}\n\nasync function handleChrisStyleVoting(interaction, env, pollManager) {\n    const customId = interaction.data.custom_id;\n    const parts = customId.split('_');\n    const position = parts[2]; // first, second, third\n    const pollId = parts[3];\n    const selectedValue = interaction.data.values[0];\n    const userId = interaction.member?.user?.id || interaction.user?.id;\n    \n    // Get or create voting session\n    const userKey = `${userId}_${pollId}`;\n    let session = await pollManager.getVotingSession(userKey);\n    \n    if (!session) {\n        session = {\n            pollId,\n            userId,\n            selections: []\n        };\n    }\n    \n    // Update selection\n    const existingIndex = session.selections.findIndex(s => s.position === position);\n    if (existingIndex >= 0) {\n        session.selections[existingIndex].bookIndex = parseInt(selectedValue);\n    } else {\n        session.selections.push({\n            position,\n            bookIndex: parseInt(selectedValue)\n        });\n    }\n    \n    // Save session\n    await pollManager.setVotingSession(userKey, pollId, userId, session.selections);\n    \n    // Check if vote is complete\n    const poll = await pollManager.getPoll(pollId);\n    const requiredSelections = Math.min(3, poll.nominations.length);\n    const hasAllSelections = session.selections.length >= requiredSelections;\n    \n    if (hasAllSelections) {\n        // Submit vote\n        const rankings = session.selections\n            .sort((a, b) => {\n                const order = { first: 0, second: 1, third: 2 };\n                return order[a.position] - order[b.position];\n            })\n            .map(s => s.bookIndex);\n        \n        await pollManager.submitVote(pollId, userId, rankings);\n        await pollManager.deleteVotingSession(userKey);\n        \n        return new Response(JSON.stringify({\n            type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n            data: {\n                content: '\u2705 Your vote has been submitted successfully!',\n                flags: 64\n            }\n        }), {\n            headers: { 'Content-Type': 'application/json' }\n        });\n    }\n    \n    // Update interface with current selections\n    return generateChrisStyleVotingInterface(poll, userId, session.selections);\n}\n\nasync function handleRankedChoiceSubmission(interaction, env, pollManager) {\n    const pollId = interaction.data.custom_id.replace('ranked_vote_', '');\n    const userId = interaction.member?.user?.id || interaction.user?.id;\n    \n    // Parse rankings from modal input\n    const rankingsInput = interaction.data.components[0].components[0].value;\n    const rankings = rankingsInput.split(',').map(num => parseInt(num.trim())).filter(num => !isNaN(num));\n    \n    await pollManager.submitVote(pollId, userId, rankings);\n    \n    return new Response(JSON.stringify({\n        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n        data: {\n            content: '\u2705 Your vote has been submitted successfully!',\n            flags: 64\n        }\n    }), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\n\nfunction generateChrisStyleVotingInterface(poll, userId, existingSelections = []) {\n    const components = [];\n    const nominations = poll.nominations;\n    const maxSelections = Math.min(3, nominations.length);\n    \n    const positions = ['first', 'second', 'third'].slice(0, maxSelections);\n    \n    positions.forEach((position, index) => {\n        const currentSelection = existingSelections.find(s => s.position === position);\n        const options = nominations.map((nom, idx) => ({\n            label: nom.title.substring(0, 100),\n            value: (idx + 1).toString(),\n            description: nom.author ? `by ${nom.author}`.substring(0, 100) : undefined,\n            default: currentSelection?.bookIndex === (idx + 1)\n        }));\n        \n        components.push({\n            type: 1, // Action Row\n            components: [{\n                type: 3, // Select Menu\n                custom_id: `chris_vote_${position}_${poll.id}`,\n                placeholder: `Select your ${position} choice`,\n                options\n            }]\n        });\n    });\n    \n    const selectedCount = existingSelections.length;\n    const statusText = selectedCount > 0 ? \n        `Selected ${selectedCount}/${maxSelections} choices` : \n        'Make your selections below';\n    \n    return new Response(JSON.stringify({\n        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n        data: {\n            content: `\uD83D\uDCCA **Chris-Style Voting** - ${poll.title}\\n\\n${statusText}`,\n            components,\n            flags: 64\n        }\n    }), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}\n\nfunction generateRankedChoiceVotingInterface(poll) {\n    const nominations = poll.nominations;\n    const nominationsList = nominations.map((nom, idx) => \n        `${idx + 1}. **${nom.title}** ${nom.author ? `by ${nom.author}` : ''}`\n    ).join('\\n');\n    \n    return new Response(JSON.stringify({\n        type: InteractionResponseType.MODAL,\n        data: {\n            title: 'Ranked Choice Voting',\n            custom_id: `ranked_vote_${poll.id}`,\n            components: [{\n                type: 1, // Action Row\n                components: [{\n                    type: 4, // Text Input\n                    custom_id: 'rankings',\n                    label: 'Enter your rankings (comma-separated numbers)',\n                    style: 2, // Paragraph\n                    placeholder: 'Example: 3,1,2 (ranks book 3 first, book 1 second, book 2 third)',\n                    required: true,\n                    max_length: 100\n                }]\n            }]\n        }\n    }), {\n        headers: { 'Content-Type': 'application/json' }\n    });\n}", "// Serverless Scheduler for Cloudflare Workers\nimport { PollManager } from './pollManager.js';\n\nexport async function checkPollPhases(env) {\n    try {\n        // Add timeout protection for scheduler\n        const timeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Scheduler timeout')), 20000); // 20 second timeout\n        });\n\n        const schedulerPromise = (async () => {\n            const pollManager = new PollManager(env);\n            \n            // Get active polls with simplified query\n            const activePolls = await pollManager.db.prepare(`\n                SELECT id, phase, nomination_deadline, voting_deadline, channel_id, guild_id, title, tally_method\n                FROM polls \n                WHERE phase IN ('nomination', 'voting') \n                LIMIT 10\n            `).all();\n            \n            const polls = activePolls.results || [];\n            console.log(`Checking ${polls.length} active polls`);\n            \n            const now = new Date();\n            \n            for (const poll of polls) {\n                try {\n                    const nominationDeadline = new Date(poll.nomination_deadline);\n                    const votingDeadline = new Date(poll.voting_deadline);\n                    \n                    // Check if nomination phase should end\n                    if (poll.phase === 'nomination' && now >= nominationDeadline) {\n                        console.log(`Ending nomination phase for poll ${poll.id}`);\n                        await pollManager.updatePollPhase(poll.id, 'voting');\n                        \n                        // Get full poll data for announcement\n                        const fullPoll = await pollManager.getPoll(poll.id);\n                        if (fullPoll) {\n                            await announceVotingPhase(fullPoll, env);\n                        }\n                    }\n                    \n                    // Check if voting phase should end\n                    else if (poll.phase === 'voting' && now >= votingDeadline) {\n                        console.log(`Ending voting phase for poll ${poll.id}`);\n                        await pollManager.updatePollPhase(poll.id, 'completed');\n                        \n                        // Get full poll data for announcement\n                        const fullPoll = await pollManager.getPoll(poll.id);\n                        if (fullPoll) {\n                            await announcePollCompletion(fullPoll, env);\n                        }\n                    }\n                } catch (pollError) {\n                    console.error(`Error processing poll ${poll.id}:`, pollError);\n                    // Continue with next poll instead of failing entirely\n                }\n            }\n        })();\n\n        await Promise.race([schedulerPromise, timeoutPromise]);\n    } catch (error) {\n        console.error('Error checking poll phases:', error);\n        if (error.message === 'Scheduler timeout') {\n            console.error('Scheduler timed out - skipping this cycle');\n        }\n    }\n}\n\nasync function announceVotingPhase(poll, env) {\n    try {\n        // Send announcement to Discord channel\n        const embed = {\n            title: '\uD83D\uDDF3\uFE0F Voting Phase Started!',\n            description: `**${poll.title}**\\n\\nNomination phase has ended. Voting is now open!`,\n            color: 0xffaa00,\n            fields: [\n                {\n                    name: '\uD83D\uDCDA Nominated Books',\n                    value: poll.nominations.map((nom, idx) => \n                        `${idx + 1}. **${nom.title}** ${nom.author ? `by ${nom.author}` : ''}`\n                    ).join('\\n') || 'No nominations',\n                    inline: false\n                },\n                {\n                    name: '\uD83D\uDCCA Voting Method',\n                    value: poll.tallyMethod === 'chris-style' ? 'Chris Style (Top 3 Points)' : 'Ranked Choice (IRV)',\n                    inline: true\n                },\n                {\n                    name: '\u23F0 Voting Deadline',\n                    value: `<t:${Math.floor(new Date(poll.votingDeadline).getTime() / 1000)}:F>`,\n                    inline: true\n                }\n            ],\n            footer: { text: `Poll ID: ${poll.id}` }\n        };\n\n        const components = [{\n            type: 1, // Action Row\n            components: [{\n                type: 2, // Button\n                style: 1, // Primary\n                label: '\uD83D\uDDF3\uFE0F Vote Now',\n                custom_id: `vote_${poll.id}`\n            }]\n        }];\n\n        await sendDiscordMessage(poll.channelId, { embeds: [embed], components }, env);\n    } catch (error) {\n        console.error('Error announcing voting phase:', error);\n    }\n}\n\nasync function announcePollCompletion(poll, env) {\n    try {\n        if (!poll.results || !poll.results.winner) {\n            console.log('Poll completed but no results available');\n            return;\n        }\n\n        const embed = poll.tallyMethod === 'chris-style' \n            ? createChrisStyleResultsEmbed(poll, poll.results)\n            : createRankedChoiceResultsEmbed(poll, poll.results);\n\n        await sendDiscordMessage(poll.channelId, { embeds: [embed] }, env);\n    } catch (error) {\n        console.error('Error announcing poll completion:', error);\n    }\n}\n\nfunction createChrisStyleResultsEmbed(poll, results) {\n    const sortedBooks = results.allBooks\n        .sort((a, b) => b.points - a.points)\n        .slice(0, 10); // Show top 10\n\n    const resultsText = sortedBooks.map((book, idx) => {\n        const medal = idx === 0 ? '\uD83E\uDD47' : idx === 1 ? '\uD83E\uDD48' : idx === 2 ? '\uD83E\uDD49' : `${idx + 1}.`;\n        return `${medal} **${book.title}** ${book.author ? `by ${book.author}` : ''} - ${book.points} points`;\n    }).join('\\n');\n\n    return {\n        title: '\uD83C\uDFC6 Poll Results - Chris Style',\n        description: `**${poll.title}**\\n\\n${resultsText}`,\n        color: 0x00ff00,\n        fields: [\n            {\n                name: '\uD83D\uDC51 Winner',\n                value: `**${results.winner.title}** ${results.winner.author ? `by ${results.winner.author}` : ''} with ${results.winner.points} points!`,\n                inline: false\n            }\n        ],\n        footer: { text: `Poll ID: ${poll.id} | ${poll.votes.length} votes cast` },\n        timestamp: new Date().toISOString()\n    };\n}\n\nfunction createRankedChoiceResultsEmbed(poll, results) {\n    const finalStandings = results.finalStandings || [];\n    const resultsText = finalStandings.slice(0, 10).map((book, idx) => {\n        const medal = idx === 0 ? '\uD83E\uDD47' : idx === 1 ? '\uD83E\uDD48' : idx === 2 ? '\uD83E\uDD49' : `${idx + 1}.`;\n        return `${medal} **${book.title}** ${book.author ? `by ${book.author}` : ''}`;\n    }).join('\\n');\n\n    return {\n        title: '\uD83C\uDFC6 Poll Results - Ranked Choice',\n        description: `**${poll.title}**\\n\\n${resultsText}`,\n        color: 0x00ff00,\n        fields: [\n            {\n                name: '\uD83D\uDC51 Winner',\n                value: `**${results.winner.title}** ${results.winner.author ? `by ${results.winner.author}` : ''}`,\n                inline: false\n            },\n            {\n                name: '\uD83D\uDCCA Elimination Rounds',\n                value: `${results.rounds?.length || 0} rounds`,\n                inline: true\n            }\n        ],\n        footer: { text: `Poll ID: ${poll.id} | ${poll.votes.length} votes cast` },\n        timestamp: new Date().toISOString()\n    };\n}\n\nasync function sendDiscordMessage(channelId, content, env) {\n    try {\n        if (!env.DISCORD_TOKEN) {\n            console.error('Discord token not available');\n            return;\n        }\n\n        const response = await fetch(`https://discord.com/api/v10/channels/${channelId}/messages`, {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bot ${env.DISCORD_TOKEN}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(content)\n        });\n\n        if (!response.ok) {\n            console.error('Failed to send Discord message:', await response.text());\n        }\n    } catch (error) {\n        console.error('Error sending Discord message:', error);\n    }\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["crypto", "MessageComponentTypes", "ButtonStyleTypes", "ChannelTypes", "TextStyleTypes", "SeparatorSpacingTypes", "WebhookType", "WebhookEventType", "InteractionType", "InteractionResponseType", "InteractionResponseFlags", "verifyKey", "import_discord_interactions", "Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "t", "handler", "before", "proxy", "outer", "method", "regex", "pathname", "params", "groups", "err", "catch", "finally", "createResponse", "format", "transform", "body", "options", "Response", "headers", "set", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp", "import_discord_interactions"]
}
