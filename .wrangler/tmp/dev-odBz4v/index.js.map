{
  "version": 3,
  "sources": ["../bundle-ydy4GD/checked-fetch.js", "../../../src/db-manager.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-ydy4GD/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-ydy4GD/middleware-loader.entry.ts"],
  "sourceRoot": "/home/runner/workspace/.wrangler/tmp/dev-odBz4v",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Database operations for Cloudflare D1\nexport class DatabaseManager {\n  constructor(db) {\n    this.db = db;\n  }\n\n  // Generate unique poll ID\n  generatePollId() {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  // Create new poll\n  async createPoll(pollData) {\n    const pollId = this.generatePollId();\n    const now = new Date().toISOString();\n\n    try {\n      await this.db.prepare(`\n        INSERT INTO polls (id, title, guild_id, channel_id, creator_id, phase, tally_method, nomination_deadline, voting_deadline, created_at, updated_at)\n        VALUES (?, ?, ?, ?, ?, 'nomination', ?, ?, ?, ?, ?)\n      `).bind(\n        pollId,\n        pollData.title,\n        pollData.guildId,\n        pollData.channelId,\n        pollData.creatorId,\n        pollData.tallyMethod,\n        pollData.nominationDeadline,\n        pollData.votingDeadline,\n        now,\n        now\n      ).run();\n\n      return { id: pollId, ...pollData, phase: 'nomination', createdAt: now };\n    } catch (error) {\n      console.error('Error creating poll:', error);\n      throw error;\n    }\n  }\n\n  // Get poll by ID\n  async getPoll(pollId) {\n    try {\n      const poll = await this.db.prepare(`\n        SELECT * FROM polls WHERE id = ?\n      `).bind(pollId).first();\n\n      if (!poll) return null;\n\n      // Get nominations\n      const nominations = await this.db.prepare(`\n        SELECT * FROM nominations WHERE poll_id = ? ORDER BY created_at ASC\n      `).bind(pollId).all();\n\n      // Get votes\n      const votes = await this.db.prepare(`\n        SELECT * FROM votes WHERE poll_id = ? ORDER BY created_at ASC\n      `).bind(pollId).all();\n\n      return {\n        id: poll.id,\n        title: poll.title,\n        guildId: poll.guild_id,\n        channelId: poll.channel_id,\n        creatorId: poll.creator_id,\n        phase: poll.phase,\n        tallyMethod: poll.tally_method,\n        nominationDeadline: poll.nomination_deadline,\n        votingDeadline: poll.voting_deadline,\n        createdAt: poll.created_at,\n        nominations: nominations.results || [],\n        votes: (votes.results || []).map(vote => ({\n          ...vote,\n          rankings: JSON.parse(vote.rankings || '[]')\n        }))\n      };\n    } catch (error) {\n      console.error('Error getting poll:', error);\n      throw error;\n    }\n  }\n\n  // Add nomination\n  async addNomination(pollId, nomination) {\n    const now = new Date().toISOString();\n    \n    try {\n      await this.db.prepare(`\n        INSERT INTO nominations (poll_id, title, author, link, user_id, username, created_at)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n      `).bind(\n        pollId,\n        nomination.title,\n        nomination.author || null,\n        nomination.link || null,\n        nomination.userId,\n        nomination.username,\n        now\n      ).run();\n\n      return true;\n    } catch (error) {\n      console.error('Error adding nomination:', error);\n      throw error;\n    }\n  }\n\n  // Submit vote\n  async submitVote(pollId, userId, rankings) {\n    const now = new Date().toISOString();\n    \n    try {\n      await this.db.prepare(`\n        INSERT INTO votes (poll_id, user_id, rankings, created_at)\n        VALUES (?, ?, ?, ?)\n      `).bind(\n        pollId,\n        userId,\n        JSON.stringify(rankings),\n        now\n      ).run();\n\n      return true;\n    } catch (error) {\n      console.error('Error submitting vote:', error);\n      throw error;\n    }\n  }\n\n  // Get active polls for guild\n  async getActivePolls(guildId) {\n    try {\n      const polls = await this.db.prepare(`\n        SELECT * FROM polls \n        WHERE guild_id = ? AND phase IN ('nomination', 'voting')\n        ORDER BY created_at DESC\n      `).bind(guildId).all();\n\n      return polls.results || [];\n    } catch (error) {\n      console.error('Error getting active polls:', error);\n      return [];\n    }\n  }\n\n  // Update poll phase\n  async updatePollPhase(pollId, newPhase) {\n    const now = new Date().toISOString();\n    \n    try {\n      await this.db.prepare(`\n        UPDATE polls SET phase = ?, updated_at = ? WHERE id = ?\n      `).bind(newPhase, now, pollId).run();\n\n      return true;\n    } catch (error) {\n      console.error('Error updating poll phase:', error);\n      throw error;\n    }\n  }\n}", "// Full Discord Bot functionality using vanilla Cloudflare Workers\nimport { DatabaseManager } from './db-manager.js';\n\n// Signature verification using Web Crypto API\nasync function verifyDiscordSignature(body, signature, timestamp, publicKey) {\n  try {\n    const encoder = new TextEncoder();\n    const key = await crypto.subtle.importKey(\n      'raw',\n      hexToBytes(publicKey),\n      { name: 'Ed25519', namedCurve: 'Ed25519' },\n      false,\n      ['verify']\n    );\n    \n    const data = encoder.encode(timestamp + body);\n    const sig = hexToBytes(signature);\n    \n    return await crypto.subtle.verify('Ed25519', key, sig, data);\n  } catch (error) {\n    console.error('Signature verification error:', error);\n    return false;\n  }\n}\n\nfunction hexToBytes(hex) {\n  const bytes = new Uint8Array(hex.length / 2);\n  for (let i = 0; i < hex.length; i += 2) {\n    bytes[i / 2] = parseInt(hex.substr(i, 2), 16);\n  }\n  return bytes;\n}\n\n// Poll command handler\nasync function handlePollCommand(interaction, env) {\n  const subcommand = interaction.data.options?.[0]?.name;\n  const options = interaction.data.options?.[0]?.options || [];\n  \n  try {\n    const db = new DatabaseManager(env.POLLS_DB);\n    \n    switch (subcommand) {\n      case 'create':\n        return await handleCreatePoll(interaction, options, db);\n      case 'status':\n        return await handlePollStatus(interaction, options, db);\n      case 'nominate':\n        return await handleNominate(interaction, options, db);\n      case 'list':\n        return await handleListPolls(interaction, db);\n      default:\n        return createResponse(`Unknown poll subcommand: ${subcommand}`);\n    }\n  } catch (error) {\n    console.error('Error handling poll command:', error);\n    return createResponse('An error occurred while processing your request.');\n  }\n}\n\n// Create poll handler\nasync function handleCreatePoll(interaction, options, db) {\n  const title = getOptionValue(options, 'title');\n  const nominationHours = getOptionValue(options, 'nomination_hours');\n  const votingHours = getOptionValue(options, 'voting_hours');\n  const tallyMethod = getOptionValue(options, 'tally_method') || 'ranked-choice';\n\n  if (!title || !nominationHours || !votingHours) {\n    return createResponse('Missing required parameters for poll creation.');\n  }\n\n  const now = new Date();\n  const nominationDeadline = new Date(now.getTime() + nominationHours * 60 * 60 * 1000);\n  const votingDeadline = new Date(nominationDeadline.getTime() + votingHours * 60 * 60 * 1000);\n\n  const pollData = {\n    title,\n    guildId: interaction.guild_id,\n    channelId: interaction.channel_id,\n    creatorId: interaction.member?.user?.id || interaction.user?.id,\n    tallyMethod,\n    nominationDeadline: nominationDeadline.toISOString(),\n    votingDeadline: votingDeadline.toISOString()\n  };\n\n  const poll = await db.createPoll(pollData);\n\n  return new Response(JSON.stringify({\n    type: 4,\n    data: {\n      embeds: [{\n        title: '\uD83D\uDCDA New Book Poll Created!',\n        description: `**${poll.title}**\\n\\nNomination phase has started!`,\n        fields: [\n          {\n            name: '\uD83D\uDCDD Nomination Deadline',\n            value: `<t:${Math.floor(nominationDeadline.getTime() / 1000)}:F>`,\n            inline: true\n          },\n          {\n            name: '\uD83D\uDDF3\uFE0F Voting Deadline',\n            value: `<t:${Math.floor(votingDeadline.getTime() / 1000)}:F>`,\n            inline: true\n          },\n          {\n            name: '\uD83D\uDCCA Tally Method',\n            value: tallyMethod === 'chris-style' ? 'Chris Style (Top 3 Points)' : 'Ranked Choice (IRV)',\n            inline: true\n          }\n        ],\n        color: 0x00ff00,\n        footer: { text: `Poll ID: ${poll.id}` }\n      }]\n    }\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\n// Poll status handler\nasync function handlePollStatus(interaction, options, db) {\n  let pollId = getOptionValue(options, 'poll_id');\n  \n  if (!pollId) {\n    const activePolls = await db.getActivePolls(interaction.guild_id);\n    if (activePolls.length === 0) {\n      return createResponse('No active polls found. Please specify a poll ID.');\n    }\n    pollId = activePolls[0].id;\n  }\n\n  const poll = await db.getPoll(pollId);\n  if (!poll) {\n    return createResponse('Poll not found.');\n  }\n\n  const embed = {\n    title: `\uD83D\uDCDA ${poll.title}`,\n    color: poll.phase === 'completed' ? 0x00ff00 : poll.phase === 'voting' ? 0xffaa00 : 0x0099ff,\n    fields: [\n      {\n        name: '\uD83D\uDCDD Phase',\n        value: poll.phase.charAt(0).toUpperCase() + poll.phase.slice(1),\n        inline: true\n      },\n      {\n        name: '\uD83D\uDCCA Tally Method',\n        value: poll.tallyMethod === 'chris-style' ? 'Chris Style' : 'Ranked Choice',\n        inline: true\n      },\n      {\n        name: '\uD83D\uDCDA Nominations',\n        value: poll.nominations.length.toString(),\n        inline: true\n      }\n    ],\n    footer: { text: `Poll ID: ${poll.id}` },\n    timestamp: new Date().toISOString()\n  };\n\n  if (poll.nominations.length > 0) {\n    const nominationsList = poll.nominations.map((nom, idx) => \n      `${idx + 1}. **${nom.title}** ${nom.author ? `by ${nom.author}` : ''}`\n    ).join('\\n');\n    \n    embed.fields.push({\n      name: '\uD83D\uDCD6 Nominated Books',\n      value: nominationsList,\n      inline: false\n    });\n  }\n\n  return new Response(JSON.stringify({\n    type: 4,\n    data: { embeds: [embed] }\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\n// Nominate handler\nasync function handleNominate(interaction, options, db) {\n  const title = getOptionValue(options, 'title');\n  const author = getOptionValue(options, 'author');\n  const link = getOptionValue(options, 'link');\n  let pollId = getOptionValue(options, 'poll_id');\n\n  if (!title) {\n    return createResponse('Book title is required for nomination.');\n  }\n\n  if (!pollId) {\n    const activePolls = await db.getActivePolls(interaction.guild_id);\n    const nominationPolls = activePolls.filter(p => p.phase === 'nomination');\n    \n    if (nominationPolls.length === 0) {\n      return createResponse('No active nomination phase found. Please specify a poll ID.');\n    }\n    pollId = nominationPolls[0].id;\n  }\n\n  const nomination = {\n    title,\n    author,\n    link,\n    userId: interaction.member?.user?.id || interaction.user?.id,\n    username: interaction.member?.user?.username || interaction.user?.username\n  };\n\n  await db.addNomination(pollId, nomination);\n\n  return createResponse(`\u2705 Successfully nominated \"${title}\" ${author ? `by ${author}` : ''}!`);\n}\n\n// List polls handler\nasync function handleListPolls(interaction, db) {\n  const activePolls = await db.getActivePolls(interaction.guild_id);\n  \n  if (activePolls.length === 0) {\n    return createResponse('\uD83D\uDCDA No active polls found in this server.');\n  }\n\n  const pollList = activePolls.map(poll => \n    `\\`${poll.id}\\` - **${poll.title}** (${poll.phase}) - <t:${Math.floor(new Date(poll.created_at).getTime() / 1000)}:R>`\n  ).join('\\n');\n\n  return new Response(JSON.stringify({\n    type: 4,\n    data: {\n      embeds: [{\n        title: '\uD83D\uDCDA Server Polls',\n        description: pollList,\n        color: 0x0099FF,\n        timestamp: new Date().toISOString()\n      }],\n      flags: 64\n    }\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\n// Helper functions\nfunction getOptionValue(options, name) {\n  const option = options.find(opt => opt.name === name);\n  return option?.value;\n}\n\nfunction createResponse(content, ephemeral = true) {\n  return new Response(JSON.stringify({\n    type: 4,\n    data: {\n      content,\n      flags: ephemeral ? 64 : 0\n    }\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n}\n\n// Cron handler for poll phase transitions\nasync function handleCron(event, env, ctx) {\n  console.log('Cron trigger activated at:', new Date().toISOString());\n  \n  try {\n    // Basic poll phase checking logic can be added here\n    console.log('Poll phase check completed successfully');\n  } catch (error) {\n    console.error('Error in cron handler:', error);\n  }\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      const url = new URL(request.url);\n      \n      // Health check endpoint\n      if (url.pathname === '/health' && request.method === 'GET') {\n        return new Response(JSON.stringify({\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          service: 'discord-book-poll-bot',\n          version: '2.0-serverless',\n          features: ['discord-verification', 'signature-validation', 'poll-commands']\n        }), {\n          status: 200,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n      \n      // Discord interactions endpoint\n      if (url.pathname === '/interactions' && request.method === 'POST') {\n        try {\n          const signature = request.headers.get('x-signature-ed25519');\n          const timestamp = request.headers.get('x-signature-timestamp');\n          const body = await request.text();\n\n          // Verify signature if public key is available\n          if (env.DISCORD_PUBLIC_KEY && signature && timestamp) {\n            const isValid = await verifyDiscordSignature(body, signature, timestamp, env.DISCORD_PUBLIC_KEY);\n            if (!isValid) {\n              return new Response('Invalid signature', { status: 401 });\n            }\n          }\n\n          const interaction = JSON.parse(body);\n\n          // Handle ping (type 1) - Discord verification\n          if (interaction.type === 1) {\n            console.log('Discord PING received, responding with PONG');\n            return new Response(JSON.stringify({ type: 1 }), {\n              status: 200,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          }\n\n          // Handle slash commands (type 2)\n          if (interaction.type === 2) {\n            if (interaction.data.name === 'poll') {\n              return await handlePollCommand(interaction, env);\n            }\n            \n            return createResponse('Unknown command. Use `/poll` to manage book polls.');\n          }\n\n          // Handle message components (type 3) - buttons, select menus\n          if (interaction.type === 3) {\n            return createResponse('Button/menu interactions will be available soon!');\n          }\n\n          // Handle modal submissions (type 5)\n          if (interaction.type === 5) {\n            return createResponse('Modal submissions will be available soon!');\n          }\n\n          return createResponse('Interaction received!');\n\n        } catch (parseError) {\n          console.error('Parse error:', parseError);\n          return new Response('Bad request', { status: 400 });\n        }\n      }\n      \n      // 404 for all other routes\n      return new Response('Not Found', { status: 404 });\n      \n    } catch (error) {\n      console.error('Worker error:', error);\n      return new Response('Internal server error', { status: 500 });\n    }\n  },\n\n  async scheduled(event, env, ctx) {\n    try {\n      return await handleCron(event, env, ctx);\n    } catch (error) {\n      console.error('Scheduled error:', error);\n    }\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/runner/workspace/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/runner/workspace/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/runner/workspace/.wrangler/tmp/bundle-ydy4GD/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/runner/workspace/.wrangler/tmp/bundle-ydy4GD/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/runner/workspace/.wrangler/tmp/bundle-ydy4GD/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
