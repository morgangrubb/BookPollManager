{
  "version": 3,
  "sources": ["../bundle-QZoV0k/checked-fetch.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../node_modules/discord-interactions/src/util.ts", "../../../node_modules/discord-interactions/src/components.ts", "../../../node_modules/discord-interactions/src/webhooks.ts", "../../../node_modules/discord-interactions/src/index.ts", "../bundle-QZoV0k/middleware-loader.entry.ts", "../bundle-QZoV0k/middleware-insertion-facade.js", "../../../src/index-minimal.js", "../../../node_modules/src/src/IttyRouter.ts", "../../../node_modules/src/src/Router.ts", "../../../node_modules/src/src/createResponse.ts", "../../../node_modules/src/src/json.ts", "../../../node_modules/src/src/error.ts", "../../../node_modules/src/src/withParams.ts", "../../../node_modules/src/src/AutoRouter.ts", "../../../node_modules/src/src/StatusError.ts", "../../../node_modules/src/src/status.ts", "../../../node_modules/src/src/text.ts", "../../../node_modules/src/src/html.ts", "../../../node_modules/src/src/jpeg.ts", "../../../node_modules/src/src/png.ts", "../../../node_modules/src/src/webp.ts", "../../../node_modules/src/src/withContent.ts", "../../../node_modules/src/src/withCookies.ts", "../../../node_modules/src/src/cors.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/home/runner/workspace/.wrangler/tmp/dev-xMAY0e",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", null, null, null, null, "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/runner/workspace/.wrangler/tmp/bundle-QZoV0k/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/runner/workspace/.wrangler/tmp/bundle-QZoV0k/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/runner/workspace/.wrangler/tmp/bundle-QZoV0k/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/runner/workspace/src/index-minimal.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/runner/workspace/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/runner/workspace/src/index-minimal.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "// Minimal Discord bot to test basic functionality\nimport { verifyKey } from 'discord-interactions';\nimport { InteractionType, InteractionResponseType } from 'discord-interactions';\nimport { Router } from 'itty-router';\n\nconst router = Router();\n\n// Health check endpoint\nrouter.get('/health', () => {\n  return new Response(JSON.stringify({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    service: 'discord-book-poll-bot'\n  }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n});\n\n// Discord interactions endpoint\nrouter.post('/interactions', async (request, env) => {\n  try {\n    const signature = request.headers.get('x-signature-ed25519');\n    const timestamp = request.headers.get('x-signature-timestamp');\n    const body = await request.text();\n\n    // Verify signature if public key is available\n    if (env.DISCORD_PUBLIC_KEY) {\n      const isValidRequest = verifyKey(body, signature, timestamp, env.DISCORD_PUBLIC_KEY);\n      if (!isValidRequest) {\n        return new Response('Bad request signature', { status: 401 });\n      }\n    }\n\n    const interaction = JSON.parse(body);\n\n    // Handle ping\n    if (interaction.type === InteractionType.PING) {\n      return new Response(JSON.stringify({ type: InteractionResponseType.PONG }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    // For now, return a simple response for other interactions\n    return new Response(JSON.stringify({\n      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,\n      data: {\n        content: 'Bot is working! Full functionality coming soon.',\n        flags: 64 // EPHEMERAL\n      }\n    }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (error) {\n    console.error('Interaction error:', error);\n    return new Response('Internal server error', { status: 500 });\n  }\n});\n\n// Default export\nexport default {\n  async fetch(request, env, ctx) {\n    try {\n      return await router.handle(request, env, ctx);\n    } catch (error) {\n      console.error('Router error:', error);\n      return new Response('Internal server error', { status: 500 });\n    }\n  }\n};", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["crypto", "MessageComponentTypes", "ButtonStyleTypes", "ChannelTypes", "TextStyleTypes", "SeparatorSpacingTypes", "WebhookType", "WebhookEventType", "InteractionType", "InteractionResponseType", "InteractionResponseFlags", "verifyKey", "import_discord_interactions", "Router", "base", "routes", "other", "__proto__", "Proxy", "get", "target", "prop", "receiver", "path", "route", "handlers", "push", "toUpperCase", "RegExp", "replace", "async", "request", "args", "response", "match", "url", "URL", "query", "k", "v", "searchParams", "concat", "t", "handler", "before", "proxy", "outer", "method", "regex", "pathname", "params", "groups", "err", "catch", "finally", "createResponse", "format", "transform", "body", "options", "Response", "headers", "set", "json", "JSON", "stringify", "text", "createResponse", "String", "html", "jpeg", "png", "webp"]
}
